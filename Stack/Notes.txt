Baseball Game

1. Edge Case: Invalid inputs, negative numbers, 
2. Pseudo Code: 
    1. Initialise a stack
    2. Iterate through the operations string and check for the various characters
        - If character is 'C': pop the top of the stack
        - If the character is 'D': pop, multiply by two and append back the top of the stack
        - If the character is '+': pop the two most recent elements from the stack, add them up and append them back into the stack
        - Else, append that character into the stack
3. Time Complexity: O(n)
4. Space Complexity: O(n)



Generate Parenthesis

1. Edge Case: 
2. Idea: sort of like backtracking where at each case it can branch out into two cases
    1. if the number of ( is less than n, then add a (
    2. if the number of ) is less than n, then add a )
3. Pseudo Code
Initialise a dfs function taking in x and y which are the number of open and close brackets
if x + y == n: append the copy of the current string into the result array
if x < n: append a open bracket into the string
if x < y: append a close bracket into the string
return the res array