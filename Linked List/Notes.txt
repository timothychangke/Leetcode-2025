Add two numbers

1. Edge Case: Addition of two numbers of difference lengths, negative numbers
2. Idea: Initialse a carry and pointers to traverse the numbers. Sum there values and mod by ten to append to the res
3. Pseudo Code:
    1. Initialise a carry and two pointers at the ends of each list. 
    2. If not null, sum their values together, let the sum = sum % 10 and the carry = sum // 10
    3. Increment the points if not null
    4. Repeat until pointers and carry are invalid
4. Time Complexity: O(n)
5. Space Complexity: O(1)
6. Learnings: Create a dummy node for res and return res.next, add the remainder of the two numbers if any, sum and carry can be derived with % and //


Intersection of two linked list

1. Edge Case: 
2. Idea: Traverse each string once and count its length. Increment the longer strings pointer to make up for the difference then traverse each node together. One of these nodes will be the Intersection
3. Pseudo Code:
    1. Traverse each string and count its length
    2. Increment the longer string by the difference then compare each node to check if they are the same
    3. Return the Intersection
4. Time Complexity: O(n)
5. Space Complexity: O(1) 
6. Learnings: Find intersection from the difference in lengths, use the a is b operator to check identical => is operator checks if two objects are identical in memory and not in equality


Linked list cycle

1. Edge Case: No cycle
2. Idea: Initialise a fast and slow pointer, when they meet is where the fast pointer overlaps the slow pointer. Initialise another pointer at the start and where they meet will be the start of the cycle
3. Pseudo Code:
    1. Initialise a fast and a slow pointer where at each loop the fast pointer moves two nodes while the slow pointer moves One
    2. Stop the loop when they intersection
    3. Initialise another pointer at teh start point and find the intersection between this new point and where the previous point intersection
    4. Return this intersection as the start of the cycle
4. Time Complexity: O(n)
5. Space Complexity: O(1)
6. Learnings: The floyds turtle and hare algorithm


Merge Two Sorted list 

1. Edge Case: Empty or null lists, lists of different lengths
2. Idea: Initialise two pointers at the start of each list, check the smaller and append to res
3. Pseudo Code:
    1. Initialise two pointers at the start of each list
    2. Initialise a res node where res.next is the node. Later return res.next
    3. Whichever of the two node values are smaller, append to res
    4. Loop until one of the nodes are invalid, the break out of the loop and append the last bit of the still valid list
4. Time Complexity: O(n)
5. Space Complexity: O(1)
6. Learnings: Dont forget about the last bit of the linked list. Initialise a cur to traverse the result while returning dummy.next

Reverse Linked list

1. Edge Case: Empty or singly noded list
2. Idea: have a previous and a curr, do a swap at each iteration
3. Pseudo Code:
    1. Set prev to null and curr to the head of the node
    2. While curr is valid, set cur.next to prev, prev to cur and cur to cur.next
4. Time Complexity: O(n)
5. Space Complexity: O(1)
6. Learnings: One liner reversal


LRU Cache

1. Edge Case: Invalid operations: get value not there, put value already there
2. Idea: Initialise a doubly linked list data structure with nodes that have prev and next as well as a size value. Declare insert and remove operations as well. Declare get and put functions around these operations
3. Pseudo Code:
    1. Initialise a node to have a value, prev and next nodes
    2. Initialise a doubly linked list queue comprising of these nodes. Save its size, the leftmost and right most nodes. Insertions will be at the right most while deletions will be at the left most
    3. Insert will insert the node prev to the right most node
    4. Deletions will remove the node after the leftmost node if no parameter is provided, else it would delete the node in question
    5. Return size will return the size of the doubly linked list
    6. Initialie the LRU Cache, comprising of a doulby linekd list and a hash map that stores the keys and points to the nodes in the list for O(1) time access
    7. For get(): Use the hash map to find the node. Remove this node then insert it to the front of the dll
    8. For put(): Check if the node already exists, if it does, delete it from the dll, remove from dictionary and decrease the size. Insert the node and declare it in the dictionary, increase the size of the dll
    9. If after the put operation the size of the dll is greater than the capacity, remove the node next of the leftmost node
4. Time Complexity: get and put have O(1) time Complexity
5. Space Complexity: O(n)
6. Learnings: Make use of different data structures to thing of how best to solve the question


LFU Cache

1. Edge Case: Invalid operations, capacity = 0
2. Idea: Likened to that of LRU Cache, LFU Cache is the same just that for each frequency it has a dll. There will be an additional min F variable and a default dict of dlls for each frequency. Each node will also store a frequency variable
3. Pseudo Code:
    1. Continuing from LRU Cache
    2. Initialise a update function that updates a node. Obtain its frequency and remove it form the dll. If the dll is zero and that frequency was the minimum frequency, delete that dll and increment minimum frequency
    3. Insert the node into the next frequency dll and update the hash map of that node with its new frequency
    4. For get(): If the key is not present, return -1, else, get the node from the hash map and update the node with update()
    5. For put(): If there is not capacity, return. If the key already exists, update the key. Else, the key is not originally inside
    6. Check if the size is equal to the capacity. If so, remove the LRU element from the minF dll and delete its key, decrement the size by 1
    7. Insert the new element into the freq table of 1, insert into hashmap and increment the size
4. Time complexity: O(1)
5. Space Complexity: O(n)
6. Learnings: Extrapolate from LRU Cache, use a minF variable 