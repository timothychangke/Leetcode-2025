Find the Town Judge

1. Edge Case: There is no town judge
2. Idea: For each trust connection, increment the second element. And decrement the trustee as the judge cannot trust others. Then check if there is an element with n - 1 elements
3. Pseudo Code:
    1. Initialise a arry of n 0s
    2. For each tuple in the trust array, decrement the truster and increment the trustee'
    3. Loop through the array and if there is an element that has a count of n - 1, return true, else return false
4. Time Complexity: O(n)
5. Space Complexity: O(n)
6. Learnings: Solve with simple counting and not graphs


Island Perimeter

1. Edge Case: The island covers the entire grid, No island
2. Idea: Traverse to each square that is a 1, if there is an adjacent square that is water of the boundary, this mean that edge part of the Perimeter
3. Pseudo Code:
    1. Define a dfs function that takes in the row and the column
    2. If the r or c are not valid and the grid[r][c] is 0, return 1
    3. If grid[r][c] is an island, turn it to -1 so that it does not get traversed again. Return dfs on the four adjacent squares, else return 0
    4. Increment res when doing dfs for each island that it comes across and return res
4. Time Complexity: O(n^2)
5. Space Complexity: O(1)
6. Learnings: Mark the island as seen by setting it to -1, if r, c are invalid or water, it is a perimeter to return 1


Making a Large Island

1. Edge Case: No islands
2. Idea: Create a hash map with the key being the island counter and the size of the island being the value. Count each islands size and save it to the dictionary. Also set the counter for each 
of its islands. Go through the table once more and for each index, check its adjacent index and calculate its max res based on the islands it touches. Save it in a set so that the same island is
not counted twice. 
3. Pseudo Code:
    1. Define a dfs function that returns the size of each island and sets all elements in the island to be the value of the counter. Increment this counter by 1 each time
    2. Save these values into a hash map
    3. Go thorugh the grid once more and check the adjacent squares. If they are valid and not 0, create a set of these indexes. Calculate the size to the sum of these indexed islands plus the
    added island
4. Time Complexity: O(n^2)
5. Space Complexity: O(1)
6. Learnings: Set the initial counter value to be 2 so that it doesnt confuse it with the other islands. Set the initial res to be the maximum original island. Set the 0 to be 0 in the hash map for 
waters


Shortest distance from all buildings

1. Edge Case: No buildings, one building, all obstacles, 
2. Idea: For each building, do a bfs to mark the distance at each point a new grid. set the point to the empty variable, which is decremented and tracked each time to make sure that it is visitable 
from every building. set the value by the depth and push it back into the queue with the new depth. Keep track of a local min as well and set this local min to res so that another loop is not needed
3. Pseudo Code:
    1. Initialise a new grid, set the empty value and decrement it every iteration, initialise a local min
    2. Traverse each cell and check if the value is a building, if it is, perform bfs
    3. Create a deque with it inside, set the depth to zero. Initialise the local_min to be inf
    4. While queue, for the number of elements in the queue, popleft and traverse that cell
    5. if its value is equal to the value of empty, set it to be depth in the grid, and empty in the old grid
    6. Append it to the deque and update the local_min if appropreiate
    7. After the loop, decrement empty and update res with local_min
4. Time Complexity: O((nm)^2)
5. Space Complexity: O(nm)
6. Learnings: Local_min variable, empty variable, create a new grid to keep track of the distances


Word ladder

1. Edge Case: Unable to create sequence, Ending word not in list
2. Idea: Create a dictionary with words where one of its letters is a *, then append all possible words formed with that word with *. Do a bfs starting from the begin word with its neighbours being the begin word but with *
3. Pseudo Code:
    1. Create a default dictionary of lists where the keys are * words and values are the list of normal words that can form it
    2. Do a bfs starting from the begin word and traversing to all its * words. Have a visited set to make sure that the same word is not traversed to twice
    3. If the word == endWord, return the depth
4. Time Complexity: O(10w)
5. Space Complexity: O(w)
6. Learnings: Have * be used to represent the intermediate states. Use a set to ensure words are not visited twice


Accounts Merge

1. Edge Case: 
2. Idea: Since names cant be used to differentiate the accounts, we use the index instead. Initialise a dictionary with the email as the key and the value be the index of the account. Define a union structure to union all similar 
emails together. Find the root account of each user index and append to them their emails. Lastly, map the user index to a name and sort the emails
3. Pseudo Code:
    1. Initialise a union find data structure
        - Initialise a parent array with i values and a rank array of 1s
        - Define the find function: while cur is not equal to par[cur], let par[cur] = par[par[cur]] for path compression and res = par[cur]. return cur
        - Define the union function: let a and b be the root via the find function. if they are equal, return. if rank a > rank b, let the parent of b = a and rank a += rank b. If rank b > rank a, let the parent of a = b and rank
        b += rank a
    2. Create a dictionary mapping the account to the person index. For those with accounts already in the dictionary, union them.
    3. For each entry in the dictionary, find the root user index for every email and insert into another dictionary the user and his associated emails
    4. Map the user index to a name and sort the emails
4. Time Complexity: O(nlogn) for sorting
5. Space Complexity: O(n)
6. Learnings: Use union find to merge emails with the same user, sorted vs sort


Clone graphs

1. Edge Case: Invalid graph
2. Idea: Do a dfs, mapping the old node to a newly create graph node. Do the dfs again to map the new node to its new neighbours
3. Pseudo Code:
    1. Initialise a old to new dictionary and do a dfs on the old graph, mapping each node to a newly created node and storing it in the dictionary. 
    2. Do the dfs again and map the old neighbours to the new neighbouts in the new node
4. Time Complexity: O(V + E)
5. Space Complexity: O(V)
6. Learnings: Use a oldToNew dictionary for mapping, alternatively, initialise the neighbours in one pass by doing oldToNew[node].neighbours.append(dfs(nei)), then have the dfs return the new node


Course Schedule

1. Edge Case: No course with no prerequisites, circular prerequisites
2. Idea: Initialise a graph with a -> b meaning that a has to be taken before b. Find the courses with no prerequisites using a degree array. Do a bfs starting with these courses, each time decrementing the degree array when a 
course is visited. Return if the count of courses visited == the number of courses out there
3. Pseudo Code:
    1. Initialise a graph, a defaultdict of lists and a degree array. For each prerequisites, make the connection in the graph and increment the degree array 
    2. Append all courses with a degree of 0 (no prerequisites) into the deque and perform bfs
    3. Increment the courses count and for each neighbouring courses visited, decrement the degree array by 1. If it reaches zero, append to the deque
    4. Return if the count of courses visited == the number of courses
4. Time Complexity: O(V + E)
5. Space Complexity: O(V)
6. Learnings: Use a degree array to count prerequisites


Course Schedule 2

1. Edge Case: No course with no prerequisites, circular prerequisites
2. Idea: Initialise a graph with a -> b meaning that a has to be taken before b. Find the courses with no prerequisites with a degree array. Do bfs starting with these courses. Have a res array that saves what courses has be done
3. Pseudo Code:
   1. Initialise a graph with a default dict list and a degree array. For each prerequisites, make the edge in the graph and increment the degree array of the course that needs the prerequisites
   2. Append all course with a degree of 0 into the deque and preform bfs
   3. Save the courses visited into a res array. Decrement the degree array by 1 and if it reaches zero, append the course to the deque to be visited
   4. Return the res array
4. Time Complexity: O(V + E) 
5. Space Complexity: O(V)
6. Learnings: Append to res array upon visit


Evaluate Division

1. Edge Case: Unanswerable query
2. Idea: Initialise a graph with the edges and the reverse edges with the values and the inverse of those values. Perform bfs to find the target node, and if found, return the resultant value
3. Pseudo Code: 
    1. Initialise a graph with a defaultdict list, where the key is the curr node and the values are the list of its neighbours with edges, values
    2. Perform a bfs taking in a node and the current value
    3. Traverse to other nodes each time and update the value accordingly. Maintain a visited set to make sure that the same node is not traversed to again
    4. Return the outputs of each query
4. Time Complexity: O((V + E)q)
5. Space Complexity: O((V + E)q)
6. Learnings: Add both the the values and the inverse of the values as the opposite edge


Graph Valid tree

1. Edge Case: self loops or repeated edges
2. Idea: A valid tree has no cycles, so check that a node does not visit a node that has previously already been visited but make sure it is not the direct node it came from
3. Pseudo Code:
    1. Create a bidirectional graph where an edge can go both ways. Perform a dfs, checking if the node has already been visited before (via a set)
    2. Make sure that the node in question is not the direct previous node by passing it as a parameter in the queue
    The dfs: If node is in visited: return false
    Add node to visited set 
    for each neighbouring node that is not the previous node, perform dfs on that node
4. Time Complexity: O(V + E)
5. Space Complexity: O(n)
6. Learnings: Pass in the previous node so as to not backtrack and create a cycle in a bidirectional graph


Max Area of Island

1. Edge Case: No Island, Entire piece is an island
2. Idea: Do a dfs at every island, calculate its total area and mark it so taht it isnt visited again
3. Pseudo Code:
    1. For each cell, check if it is an island, if it is, perform dfs on it
    2. Dfs():
        - Mark island as 0, res = 1 for its adjacent cells, if they are valid and value is 1, add it to res and return res
    3. Set the max area of the islands and return it
4. Time Complexity: O(nm)
5. Space Complexity: O(1)
6. Learnings: Mark visted cells so that visited set is no longer needed

Minimum height trees

1. Edge Case: Multiple MST roots
2. Idea: Start from the outside leaf nodes and traverse inwards until a root is reached. 
3. Pseudo Code:
    1. Initialise a bidirectional graph for each edge
    2. Add all leaf nodes (only have one linked node in their graph) into the deque
    3. Perform bfs starting with these nodes and traverse inward, decrementing n by one for each node visited. 
    4. Remove the element from the neighbouring array and only add to the deque when that particular node becomes a leaf node
    5. The last remaining node is the MST
4. Time Complexity: O(V + E)
5. Space Complexity: O(V)
6. Learnings: Traverse from the leaf nodes in


Number of Connected Components in an Undirected Graph

1. Edge Case: All components are connected, All graphs are not connected
2. Idea: Do a union find, where at each successful union, decrement the total number of components by 1
3. Pseudo Code:
    1. Initialise a Union Find structure with n
        class UnionFind:
            def __init__(self, n):
                self.par
                self.rank
    2. For each edge, union them, if successful, decrement the number of components by 1
4. Time Complexity: O(nE)
5. Space Complexity: O(n)
6. Learnings: Use a union find structure and return 1 or 0 based on how to decrement n


Number of Islands

1. Edge Case: Whole grid is one island, no islands
2. Idea: Do a dfs a mark each visited island so that they are not visited again
3. Pseudo Code:
    1. Intialise a dfs
        - Mark the visited islands as 0
        - Traverse to neighbouring islands and perform dfs on them
    2. Perform dfs for all cells that are islands, increment res by one each time
4. Time Complexity: O(nm)
5. Space Complexity: O(1)
6. Learnings: Note the data type the cells are marked in. This case they are in strings


Number of provinces

Just a normal union find


Open the lock

1. Edge Case: 
2. Idea: Perform a bfs function from 0000 to the target combination. Have a function that caculates the neighbours of each combination. Initialise deadlocks also as a set
3. Pseudo Code:
    1. Perform a bfs with '0000' as the starting value. Have a set to prevent exploring already explored combinations and track the depth to be returned as the answer
    2. At each loop, popleft the item in the queue and check if its the target combination
    3. For each of its neighbours, add to the visited set and append to the queue
    4. Initialise a calc neighbours function
        - For each digit, increment and decrement them by one, remember to mod 10 so that it does not overflow
        - If this combination is not visited and not in the deadlock set, append it to the array and return the res
4. Time Complexity: O(1)
5. Space Complexity: O(1)
6. Learnings: Use mod to prevent overflow


Pacific Atlantic Water Flow

1. Edge Case: 
2. Idea: Instead of seeing whether a cell can reach the ocean, start from the ocean and see if it can reach the cell
3. Pseudo Code:
    1. Perform a dfs from each costal cell, taking in the current height and only travelling to cells of a greater height (opposite to when water flows down)
    2. For each cell that can be visited, add it to the appropreiate ocean set. Remember to have a visited set to prevent backtracking
    3. Perform this for the row and col of pacific as well as the row and col or atlantic
    4. Return the intersection of these two sets
4. Time Complexity: O(nm). Each cell should be traversed once from each ocean
5. Space Complexity: O(nm)
6. Learnings: Reframe the question by seeing how many inner cells can be reached via the waters



Redundant Connections

1. Edge Case: Multiple edges that can be removed
2. Idea: To find the edge to remove, you have to identify the edge connection two subsets that is already connected. This can be done via a union find structure, unioning values unless they are already connected
which then would return a false
3. Pseudo Code: 
    1. Initialise a union find structure
    2. Initialise a parent array containing the values of each individual element and a rank array with contains all 1s
    3. Initialise a find function: while cur not equal to par[cur], set par[cur] = par[par[cur]] for path compression and then res = par[cur]. Then return res
    4. Initialise a union find function:
        - Find the parents of a and b via find()
        - If a == b, return false
        - If the rank a of is greater, set the parent of b = a and the rank of a to += rank of b
        - If the rank of b is greater, set the parent of a = b and the rank of b to += rank of a and return True
    5. Iterate through the edges and return the result of the union
4. Time Complexity: O(n)
5. Space Complexity: O(n)
6. Learnings: Union find data structure for finding cycles can also be used to find the redundant edge that creates a cycle

Rotting Oranges

1. Edge Case: No Rotten Oranges, all oranges already Rotten
2. Idea: Collect all the rotten oranges and append them into the deque. Also count the number of fresh oranges. Initialise a time variable. Do a bfs starting from the rotten oranges and if the bfs ends and 
the count of fresh oranges is greater than zero, return -1, else return the time taken to rot all oranges
3. Pseudo Code: 
    1. Count the number of fresh oranges
    2. Initialise the deque with rotten oranges
    3. Initialise a counter that increments each loop
    4. While deque, for _ in range of the len of deque, popleft and traverse the neighbours of that node if it is a fresh oranges
    5. Make it rotten, decrement the count of fresh oranges and append it to the deque
    6. Return minutes if the count == 0 else -1
4. Time Complexity: O(nm)
5. Space Complexity: O(nm)
6. Learnings: Count the number of rotten oranges and decrement it each loop


Surrounding Regions

1. Edge Case: No Os, All Os, 
2. Idea: Initialise a dfs that changes Os to Ts. Perform this for all Os on the boundary. Change the remaining Os to Xs and then the Ts back to Os
3. Pseudo Code:
    1. Initialise a dfs function that sets the value to T, the traverses the neighbouring nodes and for those in range and are Os, change them to Ts
    2. Perform this dfs for the four boundaries
    3. Change the remaining Os to Xs and then the Ts back to Os
4. Time Complexity: O(n^2)
5. Space Complexity: O(1)
6. Learnings: Think of the problem inversely to no check for cells surrounded but for cells that are not surrounded. Change values to alternative temperory value


Walls and Gates

1. Edge Cases: No Gates
2. Idea: Get the r, c of each gate and create a deque with them. Do a bfs with these starting cells and set the values in each cell to be the 