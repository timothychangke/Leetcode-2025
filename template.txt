## **Detailed Breakdown of Each Step**
Here‚Äôs how to **execute each step effectively** in an interview:

### **Step 1: Read the Question Twice & Summarize**
- Read **slowly** and note key words (e.g., "sorted", "distinct", "at most", etc.).  
- Identify **input type** (array, tree, graph, string) and **output type** (number, boolean, modified structure).  
- **Summarize the problem** in 1‚Äì2 sentences to confirm understanding with the interviewer.  

  **Example:**  
  ‚ùå **Bad summary:** "I need to find a successor."  
  ‚úÖ **Good summary:** "Given a BST, I need to find the in-order successor of a given node, meaning the next node in ascending order."

---

### **Step 2: Clarify Definitions**
- Ask the interviewer about ambiguous terms (e.g., what does "successor" mean in this case?).  
- Define what is allowed (e.g., "Can I assume the BST has unique values?").  
- Get confirmation before proceeding.

  **Example Questions:**  
  - **Sorting problem**: "Are we allowed to modify the input array?"  
  - **Graph problem**: "Is the graph directed or undirected?"  
  - **String problem**: "Should comparisons be case-sensitive?"  

---

### **Step 3: Clarify Constraints**
- Ask for **size limits**: "What is the max value of `n`?"  
- Ask for **performance expectations**: "Should I optimize for time or space?"  
- If `n` is small (`n ‚â§ 100`), brute force might be fine; if `n` is large (`n ‚â§ 10‚Å∂`), an **O(n¬≤) solution is probably too slow**.

  **Example:**  
  - ‚ùå **Bad:** "I assume n is large."  
  - ‚úÖ **Good:** "Can I assume `n ‚â§ 10‚Å∂`? If so, an O(n¬≤) solution might be too slow, and I should look for an O(n log n) or O(n) approach."

---

### **Step 4: Edge Cases & Test Cases**
- List at least **3-4 edge cases** before writing code.  
- Try **boundary cases**, **small inputs**, and **special conditions**.  
- Ask: "What happens if input is empty? Negative? Duplicates? Cycles? Already sorted?"  

  **Example Test Cases for "Find Missing Number in Array"**  
  ```python
  nums = [1, 2, 3, 5]   # Normal case ‚Üí Output: 4
  nums = [1]            # Single element ‚Üí Output: 2
  nums = []             # Empty input ‚Üí Output: 1
  nums = [2, 3, 4, 5]   # Missing first number ‚Üí Output: 1
  nums = [1, 2, 3, 4, 5] # No missing number ‚Üí Output: "No missing number"
  ```
  - **Tip:** Mention edge cases **before coding** to show structured thinking.

---

### **Step 5: Choose an Algorithm Based on Problem Type**
- Quickly recognize problem patterns:  
  - **Tree?** ‚Üí DFS, BFS, in-order traversal  
  - **Graph?** ‚Üí DFS, BFS, Dijkstra, Topological Sort  
  - **String?** ‚Üí Hash Map, Two Pointers, Sliding Window  
  - **Array?** ‚Üí Sorting, Binary Search, Two Pointers  
- Ask yourself: "What algorithm is commonly used for this structure?"  

  **Example:**  
  - If **finding shortest path in a graph** ‚Üí Use **BFS (unweighted)** or **Dijkstra (weighted)**.  
  - If **checking for a cycle in a linked list** ‚Üí Use **Floyd‚Äôs Cycle Detection (Tortoise and Hare).**  

---

### **Step 6: Implement the Naive Solution**
- **Explain it out loud** before writing.  
- Write **clean and readable code** (good variable names, spacing).  
- Avoid premature optimizations‚Äî**first, get a working version**.  
- **After coding, analyze:**  
  - Time Complexity: O(n)? O(n log n)? O(n¬≤)?  
  - Space Complexity: Does it use extra memory?  

  **Example Analysis:**  
  ```python
  # This solution iterates over the array once, making it O(n).
  # Space complexity is O(1) since we only use a few extra variables.
  ```

---

### **Step 7: Optimize If Time Permits**
- Think of **trade-offs** before rushing into optimization.  
- Ask:  
  - **Can I reduce time complexity?** (Brute force O(n¬≤) ‚Üí Efficient O(n log n) or O(n))  
  - **Can I reduce space complexity?** (Avoid extra arrays, use in-place swaps)  
  - **Can I use a data structure to improve lookup?** (Hash map, heap, set)  

  **Example:**  
  - Instead of a **brute force O(n¬≤) solution** for two-sum, use a **hash map O(n)**.  

---

### **Step 8: Run Through a Successive Example**
- **Manually walk through the code using a test case** to check correctness.  
- Move a **pointer with your cursor** to show changes.  
- Print intermediate values if debugging.  
- If incorrect, **fix errors by debugging logically** instead of guessing.  

  **Example Walkthrough for Two Pointers Approach:**
  ```python
  nums = [1, 3, 4, 7, 10], target = 7
          ^            ^
  sum = 1 + 10 = 11  (Too large, move right pointer left)
          ^       ^
  sum = 1 + 7 = 8  (Too large, move right pointer left)
          ^    ^
  sum = 1 + 4 = 5  (Too small, move left pointer right)
             ^ ^
  sum = 3 + 4 = 7  ‚úÖ (Found solution)
  ```
  - Shows **experience in debugging efficiently**.  

---

### üöÄ **Final Thoughts**
Your framework is **already excellent**, and these refinements make it even stronger. With these tweaks, you‚Äôll:  
‚úÖ Show **clear and structured thinking**  
‚úÖ Make the interviewer **trust your problem-solving skills**  
‚úÖ Improve **speed and accuracy** in solving problems  

Would you like to **simulate a mock interview** with this framework in action? I can give you a problem and guide you through each step! üöÄ