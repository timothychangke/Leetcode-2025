Merge Sorted Arrays

1. Edge Cases: Arrays of different lengths, empty arrays, 
2. Pseudo code:
    1. Initialise two pointers, each one at the start of each array. 
    2. While the pointers are less than the length of their respective arrays, increment them when their value is less than the other, adding this smaller value to the res
    3. If there are still arrays that have yet to be traversed, add these remaining elements into the array
3. Time Complexity: O(m + n)
4. Space Complexity: O(1)


Merge Strings Alternately

1. Edge Case: Arrays of different lenghts, empty arrays
2. Pseudo Code:
    1. Initialise two pointers, each at the start of the array
    2. While the pointers are less than the length of their respective arrays, increment them alternatively, each time adding their value to the res
3. Time Complexity: O(n)
4. Space Complexity: O(1)


Remove duplicates from sorted array

1. Edge case: All duplicates
2. Pseudo Code:
    1. Traverse the array and only insert into res if num[i] != num[i + 1]
3. Time Complexity: O(n)
4. Space Complexity: O(1)


Reverse Strings

1. Edge Case: palindromic strings, one character strings, empty strings
2. Pseudo Code: 
    1. Initialise a left and right pointer at the start and end of the strings
    2. While the left pointer is less than the right pointer, swap their values
3. Time Complexity: O(n)
4. Space Complexity: O(1)


Squares of sorted array

1. Edge Cases: Negative numbers, Zeros
2. Pseudo Code:
    1. Initialise two pointers left and right at both ends of the array
    2. Compare their squared values and insert the larger one into the front of the array
3. Time Complexity: O(n)
4. Space Complexity: O(1)
5. Learnings: Have both pointers at both ends, append to the res array from the front


Valid Palindrome 2

1. Edge Cases: One letter array, empty array, even length array, odd length array
2. Idea: Initialise the usual valid palindrome function. When the case where the characters dont match, skip that character both from the left side and the right side. If there is still a case where the characters dont match, then return False
3. Pseudo Code:
    1. Initialise the valid palindrome function with left and right pointers and a while loop
    2. Perform another valid palindrome function, but in the event that there is a mismatch, return the values of the palindrome skipping either the left value or the right value
4. Time complexity: O(n)
5. Space Complexity: O(1)
6. Learnings: perform the same func but excluding either the left or the right pointer so as to mimic a deletion of a character


Valid Palindrome 

1. Edge Cases: One letter array, empty array, even length and odd length array
2. Pseudo Code: 
    1. Initialise two pointers, one at the start and one at the end of the array
    2. While the left pointer is less than the right, move them closer to the center if they match, else, return False
    3. If the loop is completed, return True
3. Time Complexity: O(n)
4. Space Complexity: O(1)


Trapping Rain Water

1. Edge Cases: No rain water to trap, entirely non-decreasing or entirely non-increasing or a mountain array
2. Idea: For each index in the array, find the maximum left boundary and maximum right boundary. The minimum of these two boundaries minus its current value is the amount of water that particular cell can hold
3. Pseudo Code:
    1. Initialise an array for the left max and the right max.
    2. Using prefix and suffix, calculate the left and right boundaries for each index
    3. To calculate the res, if the minimum of the two boundaries minus the height at the current index is more than zero, increment the water by that numbers
4. Time Complexity: O(n)
5. Space Complexity: O(n)


3Sum

1. Edge Case: no solution, array less than length of 3
2. Idea: Perform two sum but on every number
3. Pseudo Code:
    1. Sort the input. For each number, perform two sum on the i + 1 to len(num), with the target of the two sum being the target of the 3sum - the current number
    2. Append combinations that work to the res
4. Time Complexity: O(n ^ 2)
5. Space Complexity: O(1)
6. Learnings: avoid duplicates by only processing numbers ahead of the current index


4Sum 

1. Edge Case: 
2. Idea: Instead of doing 4Sum, make a standardised algorithm that can solve k sum. Initialise a function that takes in the target value, the start as well as the array of the current selection and k. For each iteration, if the target is negative, 
return. if the target is zero, add it to the array. 
 - if k is still more than 2, call the function for every other value in the array, decrementing the target, appending to the array and adding to the start index. 
 - else, perform two sum on the remaining 
3. Pseudo Code: 
    1. Initialise an arr to store the temporary value and a result array. Sort the input
    2. Define the function that takes in the remaining target value, the start index and k
    3. if k is greater than 2, starting from the start index and ending at length - k, call the function for the remaining indexes of nums. 
    4. Since the question specified that all numbers are distinct, skip numbers that are repeated
    5. Append the value into the array, call the function then pop it out for the next iteration
    6. If the value of k == 2, perform the usual two sum and if the target == 0, append the values into the res. Continue running the two sum on this set of numbers as another valid combination may appear, just remember to skip duplicates
    7. Call the function for 4Sum
4. Time complexity: O(n^k)
5. Space Complexity: O(n)
6. Learnings: This is sort of a backtracking algorithm. Remember how to deal with duplicates, how to append, call then pop. Remember to call the function before returning the answer


Boats to save people

1. Edge Cases: Every individual is within the limit of the boat? 
2. Idea: Greedily, it makes sense to pair the heaviest individual with the lightest individual. If they already exceed the weight, then no other individual paired with the heaviest individual would meet the weight limit
3. Pseudo Code: 
    1. Sort the array and initialise a left and right pointer at the start and end of the array. 
    2. Check if both individuals meet the limit. If so, move the pointers and increment the boat count by one
    3. Else, only increment the right pointer as the heaviest person has to take the boat themselves
    4. Return the number of Boats
4.  Time Complexity: O(n)
5. Space Complexity: O(1)
6. Learnings: proof of correctness


Container with the most water

1. Edge Cases: array with less than two elements, mountain array 
2. Idea: Initialise a left and right pointer at both ends of the array. calculate the max water it can take and save it to the res. Then move the pointer than is smaller. It can be proven that the smaller height cannot possibly make larger 
volume of water by contradiction
3. Pseudo Code: 
    1. Initialise two pointers at the start and end of the array. 
    2. Calculate the volume of water it can contain and update the res accordingly
    3. Move the pointer pointing at the smaller of the two heights
4. Time Complexity: O(n)
5. Space Compexity: O(1)


Longest palindromic substring

1. Edge Case: No palindromic substring, duplicate palindromic substring with the same max length, palindrome with odd and even length
2. Idea: Check palindrome with each index being the center of the palindrome. Do the same check again but with i and i + 1 being the center of the palindrome
3. Pseudo Code:
    1. Initialise a pointer that tracks the center of the palindrome. From the center, find the longest palindrome moving outwards from that point. Break if substring it no longer a palindrome
    2. Repeat but with i and i + 1 as the middle of the palindrome
4. Time Complexity: O(n^2)
5. Space Complexity: O(n)
6. Learnings: To resolve the edge case of the palindrome being of even length, repeat the loop again but with two characters as the center this time


Rotate Array

1. Edge Case: 
2. Idea: Instead of actually rotating, you'll notice that a rotation is can also be made up of three reversals: Reversing the entire array, then reversing from 0 to k and k to len(array). 
3. Pseudo Code:
    1. Define the reversal function comprising of pointers and swaping each value until the pointers reach the center
    2. Perform the reversal first on the entire array, on the half from 0 to k and then from k to the end of the array
4. Time Complexity: O(n)
5. Space Complexity: O(1)
6. Learnings: To shift the array to the right by K elements is to move K elements from the back to the front of the array. The intuition is then to reverse first then reverse back the portions of k and len - k so as to get the shifted array


Two Sum 2

1. Edge Case: Sum cannot be reached? Array has less than 2 elements
2. Idea: The difference between the current sum and the target tells us whether we need to increase or decrease the sum. By leveraging the fact that the array is sorted, we can adjust the left or right pointerâ€”moving the left pointer right to 
increase the sum, or the right pointer left to decrease it.
3. Pseudo Code:
    1. Initialise a left and right pointer at the start and end of the array
    2. Based on the difference between the current sum and the target sum, adjust the pointers accordingly
    3. Return the index when the target sum is met
4. Time Complexity: O(n)
5. Space Complexity: O(1)

