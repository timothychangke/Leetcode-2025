Merge Sorted Arrays

1. Edge Cases: Arrays of different lengths, empty arrays, 
2. Pseudo code:
    1. Initialise two pointers, each one at the start of each array. 
    2. While the pointers are less than the length of their respective arrays, increment them when their value is less than the other, adding this smaller value to the res
    3. If there are still arrays that have yet to be traversed, add these remaining elements into the array
3. Time Complexity: O(m + n)
4. Space Complexity: O(1)


Merge Strings Alternately

1. Edge Case: Arrays of different lenghts, empty arrays
2. Pseudo Code:
    1. Initialise two pointers, each at the start of the array
    2. While the pointers are less than the length of their respective arrays, increment them alternatively, each time adding their value to the res
3. Time Complexity: O(n)
4. Space Complexity: O(1)


Remove duplicates from sorted array

1. Edge case: All duplicates
2. Pseudo Code:
    1. Traverse the array and only insert into res if num[i] != num[i + 1]
3. Time Complexity: O(n)
4. Space Complexity: O(1)


Reverse Strings

1. Edge Case: palindromic strings, one character strings, empty strings
2. Pseudo Code: 
    1. Initialise a left and right pointer at the start and end of the strings
    2. While the left pointer is less than the right pointer, swap their values
3. Time Complexity: O(n)
4. Space Complexity: O(1)

