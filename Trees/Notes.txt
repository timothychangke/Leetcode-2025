Balanced Binary Tree

1. Edge Case: Empty tree, tree with only one node
2. Idea: Traverse the tree and return False if the difference in depths between a left and right node differs by more than one, else, return the max of left and right as that is the depth for that node
3. Pseudo Code:
    1. Define a dfs function
        - Terminal condition: if null, return 0
        - Perform dfs for left and right node
        - If the difference between the left and right node is greater than 1, or that left or right is already a -1,  return -1
        - Else, return the max of left and right + 1
    2. Return the result of the check of whether dfs == -1
4. Time Complexity: O(n) where n is the number of nodes
5. Space Complexity: O(1)
6. Learnings: Have the dfs return -1 and propagate this -1 to the top of the call stack


Binary Tree Preorder Recursive Traversal

1. Edge Case: Null or single node tree
2. Pseudo Code:
    1. Initialise a dfs function
    - Terminal condition: if null, return 
    - Performs function (ie print)
    - dfs(left)
    - dfs(right)
3. Time Complexity: O(n)
4. Space Complexity: O(1)


Binary Tree Inorder Recursive Traversal

1. Edge Case: Null or single node tree
2. Pseudo Code:
    1. Initialise a dfs function
    - Terminal condition: if null, return 
    - dfs(left)
    - Performs function (ie print)
    - dfs(right)
3. Time Complexity: O(n)
4. Space Complexity: O(1)


Binary Tree Postorder Recursive Traversal

1. Edge Case: Null or single node tree
2. Pseudo Code:
    1. Initialise a dfs function
    - Terminal condition: if null, return 
    - dfs(left)
    - dfs(right)
    - Performs function (ie print)
3. Time Complexity: O(n)
4. Space Complexity: O(1)


Binary Tree Preorder Iterative Traversal

1. Edge Case: Null or single node tree
2. Idea: Use a stack to keep track of the right nodes after traversing to and processing the left nodes. Until null, pop a node from the stack, process and start back up at the start of the loop
3. Pseudo Code:
    1. Initialise a stack and curr to be the root node
    2. While stack or curr
        - If curr
            - append curr to res
            - append curr.right to the stack
            - let cur be cur.left
        3. Pop from the stack and let curr = stack.pop()
        4. Move back to the top of the stack
4. Time Complexity: O(n)
5. Space Complexity: O(n) for the stack
6. Learnings: If condition to check if curr is null, if it is, let curr = stack.pop() which is the most recent right nodes


Binary Tree Inorder Iterative Traversal

1. Edge Case: Null or single node tree
2. Idea: Use a stack to keep track of all previous cur.left nodes. Keep moving left and appending the node to the stack. Until cur is null, pop from the stack, save it to the result then set cur to be cur.right
3. Pseudo Code:
    1. Initialise a stack and curr to be the root node
    2. While stack or curr
        - While curr 
            - Append curr to the stack 
            - Set curr to be curr.left
        - Pop from the stack and append the node to the res
        - Set cur to be cur.right
4. Time Complexity: O(n)
5. Space Complexity: O(n) for the stack
6. Learnings: Append the cur.left until its null, the pop and traverse to the right by one


Binary Tree Postorder Iterative Traversal

1. Edge Case: Null or single node tree
2. Idea: A node is processed if it has been touched twice. Append to the stack the node and whether it has been touched twice, process the node if it has been touched twice
3. Pseudo Code:
    1. Initialise a stack with the initial value of (root, false)
    2. While stack
        3. Pop from the stack and if true, append to res
        4. Else, if node is non-null, append to the stack (root, True) and root.left and root.right with values of false
4. Time Complexity: O(n)
5. Space Complexity: O(n) for the stack
6. Learnings: Post order processes nodes if touched twice


Diameter of binary tree

1. Edge Case: Null or single node tree, linked list tree
2. Idea: Perform dfs which sets res to the current diameter, then returns the max value of the depth of its left and right trees
3. Pseudo Code:
    Initialise a dfs function 
    1. Terminal condition: if null, return 0
    2. Obtain dfs for node.left
    3. Obtain dfs for node.right
    4. Calculate diameter and set to res if needed
    5. Return the max of left and right as that is the max depth and hence the left/right portion of the diameter plus one (including the current node)
4. Time Complexity: O(n) for the number of nodes
5. Space Complexity: O(1)
6. Learings: Compute res but return the max depth of that particular node. The max diameter does not necessarily pass through the root


Invert Binary Tree

1. Edge Case: Null or single node tree
2. Idea: Recursively go down the tree and swap the left and right nodes
3. Pseudo Code:
    1. If null, return 
    2. set the left and right nodes to be the func(right) and func(left) nodes
    3. return the root
4. Time Complexity: O(n)
5. Space Complexity: O(n)
6. Learnings: No need to initialise a dfs function


Maximum depth of binary tree

1. Edge Case: Null or singlely depthed node tree
2. Idea: Recursively return the max depth of the left and right tree
3. Pseudo Code
    1. if null, return 0
    2. return max(dfs(left), dfs(right)) + 1
    3. Call the function for the root node
4. Time Complexity: O(n)
5. Space Complexity: O(1)
Learnings: No need for a dfs function, can just call the exisiting function. Could also use a bfs to count the max depth


Same Tree

1. Edge Case: Null or singlely depthed node tree
2. Idea: Check if the both children are null, these means that the entire tree has been traversed and both trees are valid, else return False, return the dfs values of the left and right subtrees
3. Pseudo Code:
    1. If both subtrees are null, return True
    2. If only one of them are null or their vaules are not equal, return false
    3. Return the dfs value of the left subtree and the dfs value of the right subtree as both have to be true
4. Time Complexity: O(n)
5. Space Complexity: O(1)
Learnings: If both subtrees reach the null stage and did not return false, then they are valid trees


Subtree of another tree

1. Edge Case: Null or singlely depthed node tree, both subtree and tree are the same, subtree bigger than tree?
2. Idea: For every node in the tree, check if the subtree is the same tree as that node
3. Pseudo Code:
    1. Define a function for same tree^
    2. Do a dfs down tree, performing same tree for each node. If null, return False
    3. Return the outcome of same tree
4. Time Complexity: O(nm)
5. Space Complexity: O(1)
6. Learnings: Remember to have a terminating condition for the subtree function as well


Binary Tree Maximum path sum

1. Edge Case: Negative numbers, null or single node trees
2. Idea: For every traversal, calculate the path sum and add to the res if its greater, else, return the max path sum of the left and right node
3. Pseudo Code: 
    Initialise a dfs
    1. Terminal condtion: if null, return 0
    2. Obtain the max path sum of the left tree
    3. Obtain the max path sum of the right tree
    4. Calculate the max path sum of both the left and right tree and save to res
    5. Return the max path sum of either the left or the right + the value of the current node
4. Time Complexity: O(n)
5. Space Complexity: O(1)
6. Learnings: Compute res insitu while returning the max path sum


Serialise and deserialise binary tree

1. Edge Case: Null or single node trees
2. Idea: do a preorder traversal of the tree, appending also the null values. Deserialise by traversing the array 
3. Pseudo Code:
    1. Serialisation: Do a preorder dfs of the tree and append the values to res. If null, append a 'N' to res as well. Join array by ',' to convert it into a string
    2. Deserialisation: split the string by ',', do a dfs of the array, taking in i as index. 
        - If node is null, increment i by one and return 
        - Create a node and set its value, increment i by 1. 
        - Let node.left = dfs() and node.left = dfs()
4. Time Complexity: O(n)
5. Space Complexity: O(1) if result is not counted
6. Learnings: have a dfs that iterates a global index value to go through the serialised array. Don't have to return null, just return when the terminal condition is met


Sum of distances in tree

1. Edge Case: Null or singly node trees, negative nodes
2. Idea: No need to brute force. Do a first dfs to get the sum of the tree from the root as well as get the depths of node. Then perform a second dfs to get the distances by incrementing all distances of nodes not under
the current node and decrementing all distances of nodes under the current node
3. Pseudo Code:
    1. Initialise the graph as a default dictionary. Each of the edges provided are bidirectional so connect both a->b and b->A
    2. Initialise a count array and a res array. The count array will save the number of nodes under that particular node
    3. Perform a dfs with the parameters of cur node, parent node and depth
        - Set the current count to be 1
        - If cur not equal to parent (have to make sure the node doesnt go back up)
            - For each neighbour of the current node, increment the count by performing dfs on that node, also add to the distance of the root node
            - Append to the count array and return the count for it to go upwards
    4. Perform another dfs with the parameters being cur, parent and sub_ans
        - For each neighbouring node of cur, if cur is not equal to parent, call dfs on it with the sub_ans being sub_ans + (n - count) - count as all the nodes under it decrease in distance by one while the rest increase in 
        distance by 1
        - Store each sub_ans into the result array and return it
4. Time Complexity: O(n)
5. Space Complexity: O(n)
6. Learnings: The sum of distances of each node is related to the sum of distances of its neighbouring nodes


Binary Tree Level Order Traversal

1. Edge Case: null or singly node trees, linked list trees
2. Idea: Do a BFS on the tree with the help of a queue
3. Pseudo Code:
    1. Initialise a queue with the root inside
    2. For each value in the queue, append the left and right children of the nodes to a sub res, if null, continue
    3. Append the sub res to res
4. Time Complexity: O(n)
5. Space Complexity: O(n)
6. Learnings: Check if node is null and have a sub res to append to res for each levelOrder


Binary Tree Right Side View

1. Edge Case: null of singly node trees
2. Idea: Do a BFS on the tree but now only saving the last element of each depth
3. Pseudo Code:
    1. Initialise a queue with the root inside
    2. For each value in the queue, append the left and right children of the nodes into res. Check if null
    3. For the very last element in the loop (can also just have a running variable, the variable at the end of the loop will be the last variable)
    4. Save the last variable to res
    5. Return res
4. Time Complexity: O(n)
5. Space Complexity: O(n)
6. Learnings: Same method as level order traversal, just that only the rightmost last element if of interest. Use the running variable


Binary Tree Zigzag Level Order Traversal


