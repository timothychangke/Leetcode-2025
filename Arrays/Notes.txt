Add to Array-Form of Integer

1. Edge Cases: Adding from an empty array, adding zeros, handling carry overs
2. Pseudo code:
    1. Initialise a carry value, a result value, a pointer that traverses the array backwards
    2. While the pointer is greater than zero or sum or carry:
        - Sum the all the elements together and mod them by 10, obtain the carry by doing floor division by 10
        - Add this value to the res by multiplying it with 10 * pow
        - Decrement the pointer, divide the number by 10 and increment the pow
        - If the num is 0, have it return 0 in the sum. if the index is <= 0, have it return zero in the sum (handling of overflow)
    3. Return res
3. Time Complexity: O(n + m)
4. Learnings:
- Use the pow method to append to the front of a number
- Use floor division to obtain the carry


Best Time to Buy and Sell Stock

1. Edge Cases: empty array?, one element array?, two element array with non-increasing values?
2. Pseudo Code:
    1. Initialise the left and right pointers and a res variable
    2. While the right pointer does not exceed the length of the array:
        - if the value at the right pointer is more than the value at the left, save it to res if it is greater than res
        - else, let left = right 
        - increment right by one
    3. Return res
3. Time Complexity: O(n)
4. Learnings:
 - Reset sliding window when the delta is no longer positive


Concatenation of Array

1. Edge Cases: empty array
2. Pseudo Code:
    1. Return the array multiplied by two
3. Time Complexity: O(n)


Contains Duplicates

1. Edge Cases: empty array?, all duplicates, no duplicates
2. Pseudo Code:
    1. Turn both arrays into sets and compare the lengths of both sets
    2. Return if the length of the sets are the same
3. Time Complexity: O(n)


Count Binary Strings

1. Edge Cases: empty string, one element string, invalid string?
2. Idea:
Comparing two sections of the string (either a 1s section and a 0s section or a 0s section and a 1s section), finding the minimum length between these two sections will return the number of substrings grouped consecutively within that two sections
3. Pseudo Code
    1. Pre compute the length of each consecutive section of zeros or ones
    2. For each pair of sections side by side, calculate the minimum value between these two sections. This would return the number of substrings that are grouped consecutively between these two sections
    3. Increment the res for each of these sections and return the final value
4. Time Complexity: O(n)
5. Learnings:
Pre computing the minimum between each sections will give the number of consecutive substrings between the two elements


Degree of an Array

1. Edge Cases: empty string, elements with multiple max frequency
2. Idea:
To solve this in one pass, there are several steps to do 
- Save the index of the first occurrence of the element. 
- Save the max frequency of each element. If the max frequency is greater then the current max, the res is the length of the current index and the element's first index
- If the count of the current element is the same as the max frequency and its starting index is ahead of the current max frequency's starting index, meaning that its substring length is shorter, save it as the res instead
3. Pseudo Code:
    1. Initialise a res, a dictionary to store the max frequencies, a dictionary to store the first index, and a max frequency variable
    2. Iterate through the string
        - If not in the first index map, add the index inside
        - Increment the max frequency of the element. If it greater than the current max frequency, save its substring length as the res. This is calculated by minusing the current index position with the first index position   
        - If the current frequency is equal to that of the current max frequency and its length is shorter than the current res, save this length as res
    3. Return res
4. Time Complexity: O(n)
5. Space Complexity: O(n)
6. Learnings:
 - Saving the start index of each element to compute the final length of the Strings
 - Solve for the edge case where two elements have the same maximum frequency by comparing every elements frequency and saving the shorter length of the two


Design Hashmap

1. Edge Case: Duplicate values?
2. Idea:
Use an array together with a linked list to construct a hash map. This involves the coding up of the various functions relevant to a Hashmap
 - Hashing: Initialise a multiplier and a hash number (length of the array). For every element, multiply it with the multiplier and then mod it with the hash number, this would return the index in which this element should be placed
 - Inserting: Append the element to its hashed position, at the head of the linked list
 - Getting: Find the position of the element via the hash function, then traverse the linked list to find the element
 - Removing: Hash the value to get the position of the element. At this position, traverse the linked list to find the element that is to be removed. Remove it by joining the elements before and after it
 3. Pseduo Code:
    1. Initialise a list node 
    2. Initialise the multipler and the hash value
    3. Initialise the array of length of the hash value
    4. Create hash function that multiplies the value with a multiplier than hashes it with the hash value to indentify the index it is to be inserted into
    5. Insert(): Create a linked list node and append it to the start of its position in the array (found via the hash function). However, before this, you'll have to remove the node if it already exists.
    6. Get(): Find the node's position via the hash function and traverse the linked list until you find that node. If not found, return -1, else return the node's value
    7. Remove(): Find the node's position via the hash function. First check if the first node is the node in question. If not the while node.next is non null, loop through to find if node.next.key is the key we are looking for. If loop ends without finding the node, return -1
4. Time Complexity: O(n)
5. Space Complexity: O(n)
6. Learnings:
- Removing the node before putting the node makes for cleaner code
- While trying to find the node in the remove(), have cur be node.next so that the removal process of joining the node prev and node next easier
- Hash function 


Design Hashset

Same as design hashmap, just that you store only the hash keys with no need for storing values


Longest Common Prefix

1. Edge Cases: empty strings, same strings, no common Prefix
2. Idea:
The string of each word to that index has to be the same for every word
3. Pseudo Code:
    1. Use the first string as the comparision to the result
    2. Iterate through the other strings at the same index. 
     - if the letter at the same index is different, break out of the loop and return the res
     - if the index is greater than the length of that string, break out of the loop and return the res
     - else, once reaching the end of the strs loop for that particular index, append that letter to the res
    3. Return res
4. Time Complexity: O(total number of letters in all strs)
5. Learnings:
- Checking for strings where the index exceeds the length of that string is also a terminating condition


Majority element

1. Edge Case: empty array, one element array, array containing two elements of the same frequency
2. Idea:
A Majority element will have a frequency that is more than the rest of the other elements in the array combined. If we encounter the element with the max frequency and increment it while decrementing it if we face other elements, if in the end this value is greater than zero, 
this element is a majority element. This algorithm only works on the assumption that there is always a majority element in the array
3. Pseudo Code:
    1. Initialise a majority element variable and a max frequency variable
    2. Iterate through the elements
     - if the element is the same as the max frequency element, increment its count by 1
     - if the element is not the same as the max frequency element, decrement its count by 1
         - if the max frequency is now 0, set this number as the new max frequency element
    3. Return the max frequency element if the value of the max frequency is greater than zero and the count is indeed more than half the length of the array
4. Time Complexity: O(n)
5. Learnings:
 - This is the Boyer Moores voting algorithm
 - It only works if there is guaranteed a majority element in the array


Majority Element 2

1. Edge Case: 
2. Idea: 
Similar idea to majority element 1, just that now two variables are saved instead of one. Same principle applies where if there are two majority elements, their counts will be greater than the rest of counts of the other elements combined
3. Pseudo Code:
    1. Initialise four variables, two for the counts of the max and second max frequencies and two variables to save what these elements are. Make sure that the second variable initialised is different from the first variable
    2. Iterate the array of elements
     - if the element is equal to the first variable, increment the first variable by one
     - if the element is equal to the second variable, increment the second variable by one
     - else if the count of the first variable is zero, save the current variable to be the most frequent variable and set its count to 1
     - else if the count of the second variable is zero, save the current variable to be the second most frequent variable and set its count to 1
     - else, decrement the counts of both the variables by one
    3. Return the variables if the counts are greater than zero and their actual counts are greater than len(array) // 3
4. Time Complexity: O(n)
5. Space Complexity: O(1)
6. Learnings:
 - Variation of the original boyer moores algorithm but with multiple variables instead of just one
 - Initial element has to be different so that there isn't a bias to one number


 Move zeros

 1. Edge Case: empty array, array with all zeros, array with no zeros
 2. Pseudo Code:
    1. Initialise a pointer k where k will be the ending index where all numbers preceding it are non-zeros, k itself points to a zero
    2. Iterate through the array:
     - if num is not zero, make nums[k] = that number and increment k by 1
    3. Return the resultant array modified inplace
3. Time Complexity: O(n)
4. Space Complexity: O(1)


Remove Elements

Same as move zeros


Two Sum

1. Edge Case: Assumption is that there is a solution to the question
2. Idea:
Have a dictionary that stores all the numbers that it has come across. Save the index of this number
For each other number, check if the difference between the target and the number is inside the dictionary. This means that the target can be reached summing up these two numbers
3. Pseudo Code
    1. Initialise a dictionary
    2. For each number, check if the difference between the target and the current number is in the dictionary. 
     - If it is, then return the index of the current element and the index from the dictionary
     - Else, add the element to the dictionary with the key being the value and the value being the index
4. Time Complexity: O(n)
5. Space Complexity: O(n)


Valid Anagram

1. Edge Case: empty string, string of different lengths
2. Idea:
An anangram is when two strings contain letters that are the rearrangement of one another
3. Pseudo Code:
    1. Return whether the counters of both strings are equal
4. Time Complexity: O(n)
5. Space Complexity: O(n)


Verifying an Alien dictionary

1. Edge case: empty strings, strings that entirely match, strings that completely dont match
2. Pseudo Code
Store the order into a hash map where the keys are the letters and the values are the indexes
For each pair of words A and B:
 - if there are letters in B that are of a position earlier than A or the length of A is smaller than the length of B: return False
 - once there is a letter that is of a smaller order index in A than B, A is lexigraphically smaller than B already so a break can be made
Return True if all consequtive pairs are analysed


Basic Calculator

1. Edge case: Must consider characters not integers or signs, arithmetic with minus signs in front of brackets
2. Pseudo Code
Initialise a result, a number, a sign and a stack
for each character in the string:
 - if it is a number: add it to the back of num
 - if it is a sign:
    perform the previous operation between the previous sign, num and res
    set num to be 0 and set sign to be the new sign
 - if it is a (:
    append the res and the sign to the stack
    set the sign to be positive and the res to be 0
 - if it is a ):
    calculate res with nums 
    pop the stack for the existing res and sign
    add to the base res the res from the bracket together with the sign
    set nums to 0
3. Time Complexity: O(n)
4. Space Complexity: O(n)


First Missing positive

1. Edge case: negative numbers, zeros, empty strings
2. Idea: do modifications in place to save Space. Have notations for numbers based on the indexes and traverse the array, Each number contains two information: the number and whether the index (as a number) exists in the arraychecking for the number with the missing 
index = first missing positive
3. Pseudo Code:
Set all negative numbers to zeros
For each number in the array:
 - if the number is between 0 and the length of the array, set the index equalling to that number to be negative
 - if the number is 0, set the number to the length of the array 
 Traverse the array and return the first non-negative number


Longest Valid Parenthesis

1. Edge Case: counting the parentheses must also be done in reverse order to catch all possible valid cases
2. Pseudo code:
Initialise two counters, to count the number of open and close parentheses
if the number of parentheses are the same, save the total length of the string to the res
perform the operation on the reverse


Valid Suduko

1. Edge Case: 
2. Idea: Create a dictionary with sets for each row and column and square. Add values into the sets and if there are duplicates, then return invalid
3. Pseudo Code
Initialise default dictionaries for rows, columns and squares as sets
for each value in the grid
 - if the value is within the bounds of the grid, add it to the row set, the column set and the square set (r//3, c//3)
 - if the value is already in these sets, then return False
return true
4. Time Complexity: O(n)


Best time to buy and sell stock 2:

1. Edge Case: 0 profits possible
2. Idea: Increment all positive moves from a stock price at i and a stock price at i + 1
3. Pseudo Code:
Initialise a res
for each stock price in the array, if the stock price is greater the next day, increment res by the difference, else 0
return res
4. Time Complexity: O(n)


Encode and Decode Strings:

1. Edge Case: Types of symbols that could be wrongly intepretted as length delimiters
2. Idea: For each string, append the length of the string, a delimiter, then the actual string as the encoding
For decoding, find the delimiter, the value between this index and i is the length of the string, use this value to get the string
set the points to the index after the string
3. Pseudo Code:
Encode: For each string in the original array, append the length of the string, ':' and the actual string
Decode: 
Initialise a i and j index
while i is less than the length of the string
 - find the index of the next ':' and let this be j
 - the value between i and j is the length of the next string
 - use this value to slice the next string
 - set i = j + 1
4. Time Complexity: O(n)


 Group Anagrams:

 1. Edge Case: All anagrams of one another, None are anagrams of one another
 2. Pseudo Code:
 Initialse a default dictionary where the key is an array of letters with their counts while the value is an array of the words
 For each word, find the counter of its letters and append that word to the dictionary
 return the dictionary.values()
 3. Time Complexity: O(n)
 4. Space Complexity:O(26n)


Longest Consequtive Subsequence

1. Edge Case: All numbers are in decreasing order
2. Idea: optimisation of the brute force
 - perform traversals only when the start of the subsequence is identified
 - for elements that have already been part of a traversal, they would not be part of a longer subsequence so there is no need to traverse them again
 3. Pseudo Code
 Initialise a visited set and have all the elements initialised into a set
 for each element in the array
  - if the value is in visited, continue
  - check if the element - 1 is in the set, if it is not, that means that this is the start of the subsequence
  while the next element is in the set:
   - increment the value by one and save the length into res
   - for each value visted, save it into the visited set so as to not visit it again
3. Time Complexity: O(n)


Merge Intervals

1. Edge Case: First interval can overlap all Intervals
2. Idea: for each interval, check if they overlap, if they do, save the overlapping interval, else save the interval
3. Pseudo Code:
Initialise res containing the first merged interval
for each interval, check if the start is less than the most recent interval in the res, if no, insert the new interval into res
if yes, take the max end point between the most recent interval and the current interval
return res
4. Time Complexity: O(n)


