Best Time to Buy and Sell Stock

1. Edge Case: non-increasing array
2. Idea: Implement a sliding window that restarts when the right pointer is less than the left pointer
3. Pseduo Code: 
    1.Initialise the left pointer and have a for loop that moves the right pointer
    2. When the value of the right pointer is more than that of the left pointer, record this value to the res
    3. Else, let the left pointer = right pointer
4. Time Complexity: O(n)
5. Space Complexity: O(1)
6. Learnings: No need to iterate through every possiblility if the delta between the left and right pointer is negative


Contains duplicate 2
1. Edge Case: k is less than zero
2. Idea: have a sliding window of size k where all elements in the window are distinct, else return false
3. Pseudo Code: 
    1. Have a for loop to represent the right pointer and a set to save the elements in the window
    2. At each loop, check if the new element is already in the set
    3. r - l >= k, increment l by 1 and remove the element from the set
4. Time Complexity: O(n)
5. Space Complexity: O(n)
6. Learnings: Code is simplier if there is just a check whether r - l >= k as a condition to increment l


Minimum Window Substring

1. Edge Case: String s does not contain the substring of t, lowercase and uppercase letters
2. Idea: Initialise a have map and a need map, as well as a have counter and a need counter to reduce looping through the dictionary. For each letter in s, check if the letter is needed in t. Once all the conditions of t are met, 
move the left pointer so see if the condition can still be fulfilled with a smaller string length. Repeat until the condition is no longer true and save each length to res
3. Pseudo Code  
    1. Initialise a have map and a need map, with the need map being a counter of t and the have map being empty. Also initialise a have count and a need count where the need count is the length of the need map
    2. Iterate through the string s, checking if the letter is present in the need map, if it is, increment the have map by one
    3. If the count in the have map is equal to the count in the need map, increment the have counter by one
    4. While the have counter == need counter, save the length to res and move the left pointer by one and remove the left pointer's letter from the have map. If the count in the have map is now not greater than or equal to that of the need map, break out fo the loop
4. Time Complexity: O(n)
5. Space Complexity: O(n)
6. Learnings: Using a count to check if they are the same will reduce the need to compare both dictionaries


Sliding window maximum

1. Edge Case: Negative numbers, numbers with the same value
2. Idea: Create a monoatomically decreasing stack, at each window, we only care about the maximum values and the values after the maximum value after it has be passed, values preceding that are smaller are no longer relevant.
3. Pseudo Code: 
    1. Have a for loop that represents the right pointer go through the array, and let the left pointer be zero. Also initialise a res array to store the results as well as monoatomically non-increasing stack that saves the index of the numbers
    2. For each element that is looped across, add it to the monoatomically non-decreasing stack
    3. If the top of the stack's index is less than the current left pointer, popleft the array
    4. If r - l >= k, append the top of the stack to res 
4. Time Complexity: O(n)
5. Space Complexity: O(n)
6. Learnings: Use a monoatomically non-increasing stack to store the numbers. Popped off numbers are not relevant to us


Find K Closest elements

1. Edge Case: k < 1, duplicate numbers
2. Idea: have a sliding window that iterates through the array until the element at r + 1 has a greater difference than l, this is then the k closest integers
3. Pseudo Code: 
    1. Initialise a sliding window with l = 0 and r = K
    2. If the differnce between the element at r + 1 is less than l, move the sliding window up by one, else return the window
4. Idea: Actually...just use binary search
5. Time complexity: O(n)
6. Space Complexity: O(n)
7. Learnings: There is actually a faster way which is to use binary search LOL


Longest Repeating Character Replacement

1. Edge Case: k = 0, k < 0, upper/lower case letters, non-alphabetical characters
2. Idea: Initialise a array that counts the occurences of the letters and a maxC that records the maximum occurence of a single letter. If the length of the current window is > than maxC + k, increment the left pointer by 1 and remove its letter from the counter
3. Pseudo Code:
    1. Initialise an array that keeps track of the letters and their counts in the current window
    2. have a maxC to keep track of the maximum count of a letter, without the need to loop through the array each time
    3. If r - l + 1 > maxC + k, increment left by 1 and remove it from the array 
    4. Return len(s) - l as the maximum window length will only increase and will never decrease, giving it the answer required
4. Time Complexity: O(n)
5. Space Complexity: O(n)
6. Learnings: Use a maxC variable to track the maximum count. Return len(s) - l is the answer as the window size will never decrease


Longest substring without repeating characters

1. Edge Case: string is only made up of one character, 
2. Idea: Create a set that tracks the characters in the window. While the value is in the set, keep popping out the end of the window until the element can be added into the set
3. Pseudo Code:
    1. Initialise a left pointer and a set to store all the elements in the window
    2. Have a for loop that represents the right pointer
    3. While the current element is already present in the set, remove the left pointer value and increment the left pointer by 1
    4. Record the length of the string for each loop and return the max length
4. Time Complexity: O(n)
5. Space Complexity: O(n)


Minimum Size Subarray sum

1. Edge Case: Subarray does not exist (k > sum(nums)), negative numbers
2. Idea: Create a sliding window and a temp sum. Slide the window until temp sum >= k, the increment the left pointer to make the window smaller
3. Pseudo Code:
    1. Intialise a left pointer and a temp sum
    2. Iterate through the nums array with the right pointer, incrementing the temp sum each time
    3. When the temp sum reaches k, decrement the temp sum via the left pointer 
    4. For each valid loop, save res and resLen
    5. Return res and resLen
4. Time Complexity: O(n)
5. Space Complexity: O(n)


Permuation in string

1. Edge Case: length of s1 is greater than s2, they contain non-alphabetical characters, lower and uppercase letters
2. Idea: Initialise a counter for s1. Initialise a match variable so as to not need to iterate through the dictionary to check that all values are 0. Loop through s2 and increment match accordingly. If the length
of the window is larger than the len(s1), increment the left pointer
3. Pseudo Code:
    1. Initialise a counter for s1 as well as a matched variable
    2. Loop through the string s2
    3. If the character is in the s1 counter,
        - If the current counter count for that letter is 0, match -= 1
        - decrement the count in that counter by 1
        - If the current counter count is now 0, match += 1
    4. If the len of the window is greater than k and the last element is in the counter
        - If the current counter count is 0, match -= 1
        - Decrement the count by 1
        - If the current counter count is not 0, match += 1
    5. If match == len of s1, meaning that the window contains the complete permuation of s1, return True
4. Time Complexity: O(n)
5. Space Complexity: O(n)
6. Learnings: Use a match variable to save on time, there is no need for left pointer as it can be replaced with r - k